---
// 漂浮星尘与粒子连接网络背景特效
// 符合暗色、高级、哲学、代码风格
---

<div id="stardust-network" class="stardust-container">
  <canvas id="stardust-canvas"></canvas>
</div>

<style>
  .stardust-container {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    z-index: -1;
    pointer-events: none;
    overflow: hidden;
  }

  #stardust-canvas {
    width: 100%;
    height: 100%;
    background: transparent;
  }
</style>

<script>
  // 粒子接口定义
  interface Particle {
    x: number;
    y: number;
    vx: number;
    vy: number;
    size: number;
    color: string;
    opacity: number;
    pulsePhase: number;
    originalSize: number;
  }

  // 配置接口定义
  interface StardustConfig {
    particleCount: number;
    maxDistance: number;
    mouseInfluence: number;
    particleSpeed: number;
    particleSize: {
      min: number;
      max: number;
    };
    colors: {
      particles: string[];
      connections: string;
      mouseConnection: string;
    };
  }

  class StardustNetwork {
    private canvas: HTMLCanvasElement;
    private ctx: CanvasRenderingContext2D;
    private particles: Particle[] = [];
    private connections: any[] = [];
    private mouseX: number = 0;
    private mouseY: number = 0;
    private isMouseActive: boolean = false;
    private config: StardustConfig;

    constructor() {
      this.canvas = document.getElementById('stardust-canvas') as HTMLCanvasElement;
      this.ctx = this.canvas.getContext('2d')!;
      
      // 配置参数
      this.config = {
        particleCount: 80,
        maxDistance: 120,
        mouseInfluence: 150,
        particleSpeed: 0.3,
        particleSize: {
          min: 1,
          max: 3
        },
        colors: {
          // 符合暗色主题的哲学色调
          particles: [
            'rgba(147, 197, 253, 0.8)', // 蓝色 - 理性思考
            'rgba(196, 181, 253, 0.7)', // 紫色 - 神秘哲思
            'rgba(253, 230, 138, 0.6)', // 金色 - 智慧光辉
            'rgba(134, 239, 172, 0.5)', // 绿色 - 生命代码
            'rgba(248, 113, 113, 0.4)'  // 红色 - 激情思辨
          ],
          connections: 'rgba(148, 163, 184, 0.15)', // 连接线 - 微妙灰蓝
          mouseConnection: 'rgba(253, 230, 138, 0.3)' // 鼠标连接 - 金色高亮
        }
      };

      this.init();
      this.bindEvents();
      this.animate();
    }

    private init(): void {
      this.resize();
      this.createParticles();
    }

    private resize(): void {
      this.canvas.width = window.innerWidth;
      this.canvas.height = window.innerHeight;
    }

    private createParticles(): void {
      this.particles = [];
      for (let i = 0; i < this.config.particleCount; i++) {
        const particle: Particle = {
          x: Math.random() * this.canvas.width,
          y: Math.random() * this.canvas.height,
          vx: (Math.random() - 0.5) * this.config.particleSpeed,
          vy: (Math.random() - 0.5) * this.config.particleSpeed,
          size: Math.random() * (this.config.particleSize.max - this.config.particleSize.min) + this.config.particleSize.min,
          color: this.config.colors.particles[Math.floor(Math.random() * this.config.colors.particles.length)],
          opacity: Math.random() * 0.5 + 0.3,
          pulsePhase: Math.random() * Math.PI * 2,
          originalSize: 0
        };
        particle.originalSize = particle.size;
        this.particles.push(particle);
      }
    }

    private updateParticles(): void {
      this.particles.forEach((particle: Particle) => {
        // 基础移动
        particle.x += particle.vx;
        particle.y += particle.vy;

        // 边界处理 - 循环效果
        if (particle.x < 0) particle.x = this.canvas.width;
        if (particle.x > this.canvas.width) particle.x = 0;
        if (particle.y < 0) particle.y = this.canvas.height;
        if (particle.y > this.canvas.height) particle.y = 0;

        // 鼠标交互
        if (this.isMouseActive) {
          const dx = this.mouseX - particle.x;
          const dy = this.mouseY - particle.y;
          const distance = Math.sqrt(dx * dx + dy * dy);
          
          if (distance < this.config.mouseInfluence) {
            const force = (this.config.mouseInfluence - distance) / this.config.mouseInfluence;
            particle.vx += dx * force * 0.002;
            particle.vy += dy * force * 0.002;
            
            // 鼠标附近的粒子会变大发光
            particle.size = particle.originalSize * (1 + force * 0.5);
            particle.opacity = Math.min(1, particle.opacity + force * 0.3);
          } else {
            // 恢复原始状态
            particle.size = particle.originalSize;
            particle.opacity = Math.max(0.3, particle.opacity - 0.01);
          }
        }

        // 呼吸效果
        particle.pulsePhase += 0.02;
        const pulse = Math.sin(particle.pulsePhase) * 0.1 + 1;
        particle.size = particle.originalSize * pulse;
      });
    }

    private drawParticles(): void {
      this.particles.forEach((particle: Particle) => {
        this.ctx.save();
        this.ctx.globalAlpha = particle.opacity;
        this.ctx.fillStyle = particle.color;
        
        // 发光效果
        this.ctx.shadowColor = particle.color;
        this.ctx.shadowBlur = particle.size * 2;
        
        this.ctx.beginPath();
        this.ctx.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2);
        this.ctx.fill();
        this.ctx.restore();
      });
    }

    private drawConnections(): void {
      for (let i = 0; i < this.particles.length; i++) {
        for (let j = i + 1; j < this.particles.length; j++) {
          const dx = this.particles[i].x - this.particles[j].x;
          const dy = this.particles[i].y - this.particles[j].y;
          const distance = Math.sqrt(dx * dx + dy * dy);

          if (distance < this.config.maxDistance) {
            const opacity = (this.config.maxDistance - distance) / this.config.maxDistance;
            
            this.ctx.save();
            this.ctx.globalAlpha = opacity * 0.3;
            this.ctx.strokeStyle = this.config.colors.connections;
            this.ctx.lineWidth = 1;
            this.ctx.beginPath();
            this.ctx.moveTo(this.particles[i].x, this.particles[i].y);
            this.ctx.lineTo(this.particles[j].x, this.particles[j].y);
            this.ctx.stroke();
            this.ctx.restore();
          }
        }
      }
    }

    private drawMouseConnections(): void {
      if (!this.isMouseActive) return;

      this.particles.forEach((particle: Particle) => {
        const dx = this.mouseX - particle.x;
        const dy = this.mouseY - particle.y;
        const distance = Math.sqrt(dx * dx + dy * dy);

        if (distance < this.config.mouseInfluence) {
          const opacity = (this.config.mouseInfluence - distance) / this.config.mouseInfluence;
          
          this.ctx.save();
          this.ctx.globalAlpha = opacity * 0.4;
          this.ctx.strokeStyle = this.config.colors.mouseConnection;
          this.ctx.lineWidth = 2;
          this.ctx.beginPath();
          this.ctx.moveTo(particle.x, particle.y);
          this.ctx.lineTo(this.mouseX, this.mouseY);
          this.ctx.stroke();
          this.ctx.restore();
        }
      });
    }

    private animate(): void {
      this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
      
      this.updateParticles();
      this.drawConnections();
      this.drawParticles();
      this.drawMouseConnections();
      
      requestAnimationFrame(() => this.animate());
    }

    private bindEvents(): void {
      window.addEventListener('resize', () => this.resize());
      
      window.addEventListener('mousemove', (e: MouseEvent) => {
        this.mouseX = e.clientX;
        this.mouseY = e.clientY;
        this.isMouseActive = true;
      });

      window.addEventListener('mouseleave', () => {
        this.isMouseActive = false;
      });

      // 触摸设备支持
      window.addEventListener('touchmove', (e: TouchEvent) => {
        if (e.touches.length > 0) {
          this.mouseX = e.touches[0].clientX;
          this.mouseY = e.touches[0].clientY;
          this.isMouseActive = true;
        }
      });

      window.addEventListener('touchend', () => {
        this.isMouseActive = false;
      });
    }
  }

  // 等待 DOM 加载完成后初始化
  document.addEventListener('DOMContentLoaded', () => {
    // 检查用户是否偏好减少动画
    const prefersReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)').matches;
    
    if (!prefersReducedMotion) {
      new StardustNetwork();
    }
  });
</script> 